// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly POW = 4;
	public static readonly MUL = 5;
	public static readonly DIV = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly MOD = 9;
	public static readonly EQUAL = 10;
	public static readonly NEQUAL = 11;
	public static readonly NOT = 12;
	public static readonly NEG = 13;
	public static readonly BOOLEAN = 14;
	public static readonly IF = 15;
	public static readonly ELSE = 16;
	public static readonly THEN = 17;
	public static readonly VAL = 18;
	public static readonly NUMBER = 19;
	public static readonly ID = 20;
	public static readonly WHITESPACE = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "POW", "MUL", "DIV", "ADD", "SUB", "MOD", "EQUAL", 
		"NEQUAL", "NOT", "NEG", "BOOLEAN", "IF", "ELSE", "THEN", "VAL", "NUMBER", 
		"ID", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "'('", "')'", "'^'", "'*'", "'div'", "'+'", "'-'", "'mod'", 
		"'='", "'<>'", "'not'", "'~'", undefined, "'if'", "'else'", "'then'", 
		"'val'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "ADD", 
		"SUB", "MOD", "EQUAL", "NEQUAL", "NOT", "NEG", "BOOLEAN", "IF", "ELSE", 
		"THEN", "VAL", "NUMBER", "ID", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17}\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0FX\n\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x14\x06\x14l\n\x14\r\x14\x0E\x14m\x03\x15\x03\x15\x07\x15" +
		"r\n\x15\f\x15\x0E\x15u\v\x15\x03\x16\x06\x16x\n\x16\r\x16\x0E\x16y\x03" +
		"\x16\x03\x16\x02\x02\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
		"\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
		"\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%" +
		"\x02\x14\'\x02\x15)\x02\x16+\x02\x17\x03\x02\x06\x03\x022;\x04\x02C\\" +
		"c|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\x80\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05/\x03\x02" +
		"\x02\x02\x071\x03\x02\x02\x02\t3\x03\x02\x02\x02\v5\x03\x02\x02\x02\r" +
		"7\x03\x02\x02\x02\x0F;\x03\x02\x02\x02\x11=\x03\x02\x02\x02\x13?\x03\x02" +
		"\x02\x02\x15C\x03\x02\x02\x02\x17E\x03\x02\x02\x02\x19H\x03\x02\x02\x02" +
		"\x1BL\x03\x02\x02\x02\x1DW\x03\x02\x02\x02\x1FY\x03\x02\x02\x02!\\\x03" +
		"\x02\x02\x02#a\x03\x02\x02\x02%f\x03\x02\x02\x02\'k\x03\x02\x02\x02)o" +
		"\x03\x02\x02\x02+w\x03\x02\x02\x02-.\x07=\x02\x02.\x04\x03\x02\x02\x02" +
		"/0\x07*\x02\x020\x06\x03\x02\x02\x0212\x07+\x02\x022\b\x03\x02\x02\x02" +
		"34\x07`\x02\x024\n\x03\x02\x02\x0256\x07,\x02\x026\f\x03\x02\x02\x027" +
		"8\x07f\x02\x0289\x07k\x02\x029:\x07x\x02\x02:\x0E\x03\x02\x02\x02;<\x07" +
		"-\x02\x02<\x10\x03\x02\x02\x02=>\x07/\x02\x02>\x12\x03\x02\x02\x02?@\x07" +
		"o\x02\x02@A\x07q\x02\x02AB\x07f\x02\x02B\x14\x03\x02\x02\x02CD\x07?\x02" +
		"\x02D\x16\x03\x02\x02\x02EF\x07>\x02\x02FG\x07@\x02\x02G\x18\x03\x02\x02" +
		"\x02HI\x07p\x02\x02IJ\x07q\x02\x02JK\x07v\x02\x02K\x1A\x03\x02\x02\x02" +
		"LM\x07\x80\x02\x02M\x1C\x03\x02\x02\x02NO\x07v\x02\x02OP\x07t\x02\x02" +
		"PQ\x07w\x02\x02QX\x07g\x02\x02RS\x07h\x02\x02ST\x07c\x02\x02TU\x07n\x02" +
		"\x02UV\x07u\x02\x02VX\x07g\x02\x02WN\x03\x02\x02\x02WR\x03\x02\x02\x02" +
		"X\x1E\x03\x02\x02\x02YZ\x07k\x02\x02Z[\x07h\x02\x02[ \x03\x02\x02\x02" +
		"\\]\x07g\x02\x02]^\x07n\x02\x02^_\x07u\x02\x02_`\x07g\x02\x02`\"\x03\x02" +
		"\x02\x02ab\x07v\x02\x02bc\x07j\x02\x02cd\x07g\x02\x02de\x07p\x02\x02e" +
		"$\x03\x02\x02\x02fg\x07x\x02\x02gh\x07c\x02\x02hi\x07n\x02\x02i&\x03\x02" +
		"\x02\x02jl\t\x02\x02\x02kj\x03\x02\x02\x02lm\x03\x02\x02\x02mk\x03\x02" +
		"\x02\x02mn\x03\x02\x02\x02n(\x03\x02\x02\x02os\t\x03\x02\x02pr\t\x04\x02" +
		"\x02qp\x03\x02\x02\x02ru\x03\x02\x02\x02sq\x03\x02\x02\x02st\x03\x02\x02" +
		"\x02t*\x03\x02\x02\x02us\x03\x02\x02\x02vx\t\x05\x02\x02wv\x03\x02\x02" +
		"\x02xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02" +
		"\x02{|\b\x16\x02\x02|,\x03\x02\x02\x02\b\x02Wmqsy\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

