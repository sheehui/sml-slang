// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly POW = 3;
	public static readonly MUL = 4;
	public static readonly DIV = 5;
	public static readonly ADD = 6;
	public static readonly SUB = 7;
	public static readonly MOD = 8;
	public static readonly EQUAL = 9;
	public static readonly NEQUAL = 10;
	public static readonly NOT = 11;
	public static readonly NEG = 12;
	public static readonly BOOLEAN = 13;
	public static readonly IF = 14;
	public static readonly ELSE = 15;
	public static readonly THEN = 16;
	public static readonly VAL = 17;
	public static readonly LET = 18;
	public static readonly IN = 19;
	public static readonly END = 20;
	public static readonly FUN = 21;
	public static readonly SEMIC = 22;
	public static readonly NUMBER = 23;
	public static readonly ID = 24;
	public static readonly WHITESPACE = 25;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "POW", "MUL", "DIV", "ADD", "SUB", "MOD", "EQUAL", "NEQUAL", 
		"NOT", "NEG", "BOOLEAN", "IF", "ELSE", "THEN", "VAL", "LET", "IN", "END", 
		"FUN", "SEMIC", "NUMBER", "ID", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'^'", "'*'", "'div'", "'+'", "'-'", "'mod'", 
		"'='", "'<>'", "'not'", "'~'", undefined, "'if'", "'else'", "'then'", 
		"'val'", "'let'", "'in'", "'end'", "'fun'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "POW", "MUL", "DIV", "ADD", "SUB", "MOD", 
		"EQUAL", "NEQUAL", "NOT", "NEG", "BOOLEAN", "IF", "ELSE", "THEN", "VAL", 
		"LET", "IN", "END", "FUN", "SEMIC", "NUMBER", "ID", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1B\x94\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E^\n\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x06\x18\x83\n" +
		"\x18\r\x18\x0E\x18\x84\x03\x19\x03\x19\x07\x19\x89\n\x19\f\x19\x0E\x19" +
		"\x8C\v\x19\x03\x1A\x06\x1A\x8F\n\x1A\r\x1A\x0E\x1A\x90\x03\x1A\x03\x1A" +
		"\x02\x02\x02\x1B\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E" +
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02" +
		"\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B\x03\x02\x06" +
		"\x03\x022;\x04\x02C\\c|\x07\x02))2;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02" +
		"\x97\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02" +
		"\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02" +
		"\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'" +
		"\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02" +
		"\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02" +
		"\x035\x03\x02\x02\x02\x057\x03\x02\x02\x02\x079\x03\x02\x02\x02\t;\x03" +
		"\x02\x02\x02\v=\x03\x02\x02\x02\rA\x03\x02\x02\x02\x0FC\x03\x02\x02\x02" +
		"\x11E\x03\x02\x02\x02\x13I\x03\x02\x02\x02\x15K\x03\x02\x02\x02\x17N\x03" +
		"\x02\x02\x02\x19R\x03\x02\x02\x02\x1B]\x03\x02\x02\x02\x1D_\x03\x02\x02" +
		"\x02\x1Fb\x03\x02\x02\x02!g\x03\x02\x02\x02#l\x03\x02\x02\x02%p\x03\x02" +
		"\x02\x02\'t\x03\x02\x02\x02)w\x03\x02\x02\x02+{\x03\x02\x02\x02-\x7F\x03" +
		"\x02\x02\x02/\x82\x03\x02\x02\x021\x86\x03\x02\x02\x023\x8E\x03\x02\x02" +
		"\x0256\x07*\x02\x026\x04\x03\x02\x02\x0278\x07+\x02\x028\x06\x03\x02\x02" +
		"\x029:\x07`\x02\x02:\b\x03\x02\x02\x02;<\x07,\x02\x02<\n\x03\x02\x02\x02" +
		"=>\x07f\x02\x02>?\x07k\x02\x02?@\x07x\x02\x02@\f\x03\x02\x02\x02AB\x07" +
		"-\x02\x02B\x0E\x03\x02\x02\x02CD\x07/\x02\x02D\x10\x03\x02\x02\x02EF\x07" +
		"o\x02\x02FG\x07q\x02\x02GH\x07f\x02\x02H\x12\x03\x02\x02\x02IJ\x07?\x02" +
		"\x02J\x14\x03\x02\x02\x02KL\x07>\x02\x02LM\x07@\x02\x02M\x16\x03\x02\x02" +
		"\x02NO\x07p\x02\x02OP\x07q\x02\x02PQ\x07v\x02\x02Q\x18\x03\x02\x02\x02" +
		"RS\x07\x80\x02\x02S\x1A\x03\x02\x02\x02TU\x07v\x02\x02UV\x07t\x02\x02" +
		"VW\x07w\x02\x02W^\x07g\x02\x02XY\x07h\x02\x02YZ\x07c\x02\x02Z[\x07n\x02" +
		"\x02[\\\x07u\x02\x02\\^\x07g\x02\x02]T\x03\x02\x02\x02]X\x03\x02\x02\x02" +
		"^\x1C\x03\x02\x02\x02_`\x07k\x02\x02`a\x07h\x02\x02a\x1E\x03\x02\x02\x02" +
		"bc\x07g\x02\x02cd\x07n\x02\x02de\x07u\x02\x02ef\x07g\x02\x02f \x03\x02" +
		"\x02\x02gh\x07v\x02\x02hi\x07j\x02\x02ij\x07g\x02\x02jk\x07p\x02\x02k" +
		"\"\x03\x02\x02\x02lm\x07x\x02\x02mn\x07c\x02\x02no\x07n\x02\x02o$\x03" +
		"\x02\x02\x02pq\x07n\x02\x02qr\x07g\x02\x02rs\x07v\x02\x02s&\x03\x02\x02" +
		"\x02tu\x07k\x02\x02uv\x07p\x02\x02v(\x03\x02\x02\x02wx\x07g\x02\x02xy" +
		"\x07p\x02\x02yz\x07f\x02\x02z*\x03\x02\x02\x02{|\x07h\x02\x02|}\x07w\x02" +
		"\x02}~\x07p\x02\x02~,\x03\x02\x02\x02\x7F\x80\x07=\x02\x02\x80.\x03\x02" +
		"\x02\x02\x81\x83\t\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83\x84\x03\x02" +
		"\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x850\x03\x02" +
		"\x02\x02\x86\x8A\t\x03\x02\x02\x87\x89\t\x04\x02\x02\x88\x87\x03\x02\x02" +
		"\x02\x89\x8C\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02" +
		"\x02\x8B2\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8D\x8F\t\x05\x02\x02" +
		"\x8E\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02" +
		"\x90\x91\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\b\x1A\x02\x02" +
		"\x934\x03\x02\x02\x02\b\x02]\x84\x88\x8A\x90\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

